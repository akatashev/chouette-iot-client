"""
Chouette clint module facade and definition.
"""
from concurrent.futures import Future
from typing import Callable, Dict, Union

# pylint: disable=redefined-builtin
from ._chouette_client import ChouetteClient
from ._timed_decorator import TimedDecorator


def timed(metric: str, tags: Dict[str, str] = None, use_ms: bool = False) -> Callable:
    """
    A decorator that can be used to calculate the duration of code execution.
    Sends a HISTOGRAM metric.

    Args:
        metric: Name of the metric.
        tags: Tags as a dict.
        use_ms: Whether values should be sent as seconds or milliseconds.
    Returns: Decorator object.
    """
    return TimedDecorator(metric, tags, use_ms)


def count(
    metric: str, value: float, timestamp: float = None, tags: Dict[str, str] = None
) -> Future:
    """
    ChouetteClient's Count facade function.
    Sends a COUNT metric.

    Args:
        metric: Name of the metric.
        value: Metric value as a float.
        timestamp: Metric timestamp as a float.
        tags: Tags as a dict.
    Returns: Future generated by ChouetteClient.
    """
    return ChouetteClient.count(metric, value, timestamp, tags)


def rate(
    metric: str, value: float, timestamp: float = None, tags: Dict[str, str] = None
) -> Future:
    """
    ChouetteClient's Rate facade function.
    Sends a RATE metric.

    Args:
        metric: Name of the metric.
        value: Metric value as a float.
        timestamp: Metric timestamp as a float.
        tags: Tags as a dict.
    Returns: Future generated by ChouetteClient.
    """
    return ChouetteClient.rate(metric, value, timestamp, tags)


def gauge(
    metric: str, value: float, timestamp: float = None, tags: Dict[str, str] = None
) -> Future:
    """
    ChouetteClient's Gauge facade function.
    Sends a GAUGE metric.

    Args:
        metric: Name of the metric.
        value: Metric value as a float.
        timestamp: Metric timestamp as a float.
        tags: Tags as a dict.
    Returns: Future generated by ChouetteClient.
    """
    return ChouetteClient.gauge(metric, value, timestamp, tags)


def histogram(
    metric: str, value: float, timestamp: float = None, tags: Dict[str, str] = None
) -> Future:
    """
    ChouetteClient's Count facade function.
    Sends a HISTOGRAM metric.

    Args:
        metric: Name of the metric.
        value: Metric value as a float.
        timestamp: Metric timestamp as a float.
        tags: Tags as a dict.
    Returns: Future generated by ChouetteClient.
    """
    return ChouetteClient.histogram(metric, value, timestamp, tags)


def set(
    metric: str,
    value: Union[list, __builtins__.set],
    timestamp: float = None,
    tags: Dict[str, str] = None,
) -> Future:
    """
    ChouetteClient's Count facade function.
    Sends a SET metric.

    Args:
        metric: Name of the metric.
        value: Metric value as a list or set.
        timestamp: Metric timestamp as a float.
        tags: Tags as a dict.
    Returns: Future generated by ChouetteClient.
    """
    return ChouetteClient.set(metric, value, timestamp, tags)
